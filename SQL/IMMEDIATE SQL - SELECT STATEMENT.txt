/* ============================================
   SELECT STATEMENT TO RETRIEVE DATA
   * , TOP, DISTINCT, COUNT, AS, MAX, MIN, AVG
   ============================================*/

SELECT * FROM EMPLOYEE_DEMO
SELECT TOP 5 * FROM EMPLOYEE_DEMO
SELECT DISTINCT(GENDER) FROM EMPLOYEE_DEMO
SELECT COUNT(GENDER) AS NO_PERSON FROM EMPLOYEE_DEMO
SELECT MAX(AGE) AS AGE_MAX FROM EMPLOYEE_DEMO
SELECT MIN(AGE) AS AGE_MIN FROM EMPLOYEE_DEMO
SELECT AVG(AGE) AS AGE_AVG FROM EMPLOYEE_DEMO

/* ============================================
   SELECT STATEMENT TO RETRIEVE DATA SPECIFY DATABASE PATH
   ============================================*/


SELECT * FROM FIRSTDB.dbo.EMPLOYEE_DEMO

/* ============================================
   WHERE statement
   =, <> , < , > , AND, OR, NULL , NOT NULL , LIKE, IN
   ============================================*/

SELECT * FROM EMPLOYEE_DEMO WHERE GENDER = 'Male'
SELECT * FROM EMPLOYEE_DEMO WHERE GENDER <> 'Male'
SELECT * FROM EMPLOYEE_DEMO WHERE AGE < 30
SELECT * FROM EMPLOYEE_DEMO WHERE AGE > 30
SELECT * FROM EMPLOYEE_DEMO WHERE AGE < 30 AND GENDER = 'Male'
SELECT * FROM EMPLOYEE_DEMO WHERE AGE is not null
SELECT * FROM EMPLOYEE_DEMO WHERE FIRSTNAME like '%m%'
SELECT FIRSTNAME,AGE FROM EMPLOYEE_DEMO WHERE FIRSTNAME IN ('JIM','MARY')

/* ============================================
   GROUP BY -  GROUP TOGATHER FIELD BEFORE ABLE TO PERFORM AGGREGATE FUNCTIONS 
   ORDER BY -  SORTING
   ============================================*/
   
SELECT GENDER, COUNT(GENDER) AS G_COUNT FROM EMPLOYEE_DEMO
GROUP BY GENDER 
ORDER BY GENDER DESC

/* ============================================
   INNER JOIN - INTERSECT 
   LEFT JOIN - EVERYTHING ON LEFT
   RIGHT JOIN - EVERYTHING ON RIGHT
   FULL OUTER JOIN - EVERYTHING LEFT AND RIGHT 
   ============================================*/

SELECT * FROM EMPLOYEE_DEMO INNER JOIN EMPLOYEE_SALARY
ON EMPLOYEE_DEMO.EMP_ID = EMPLOYEE_SALARY.EMP_ID

SELECT * FROM EMPLOYEE_DEMO LEFT JOIN EMPLOYEE_SALARY
ON EMPLOYEE_DEMO.EMP_ID = EMPLOYEE_SALARY.EMP_ID

SELECT * FROM EMPLOYEE_DEMO RIGHT JOIN EMPLOYEE_SALARY
ON EMPLOYEE_DEMO.EMP_ID = EMPLOYEE_SALARY.EMP_ID

SELECT * FROM EMPLOYEE_DEMO FULL OUTER JOIN EMPLOYEE_SALARY
ON EMPLOYEE_DEMO.EMP_ID = EMPLOYEE_SALARY.EMP_ID

SELECT EMPLOYEE_DEMO.EMP_ID AS ID, FIRSTNAME,LASTNAME,JOB_TITLE,SALARY FROM EMPLOYEE_DEMO INNER JOIN EMPLOYEE_SALARY
ON EMPLOYEE_DEMO.EMP_ID = EMPLOYEE_SALARY.EMP_ID
WHERE EMPLOYEE_DEMO.FIRSTNAME <> 'MICHAEL'
ORDER BY SALARY DESC

/* ============================================
   GET EMPLOYEE DETAILS FROM 2 TABLES EXCEPT MICHAEL SORT DESCENDING ORDER
   ============================================*/

SELECT EMPLOYEE_DEMO.EMP_ID AS ID, FIRSTNAME,LASTNAME,JOB_TITLE,SALARY FROM EMPLOYEE_DEMO INNER JOIN EMPLOYEE_SALARY
ON EMPLOYEE_DEMO.EMP_ID = EMPLOYEE_SALARY.EMP_ID
WHERE EMPLOYEE_DEMO.FIRSTNAME <> 'MICHAEL'
ORDER BY SALARY DESC

/* ============================================
   AGGREGATE FUNCTION
   GET AVERAGE SALARY OF EMPLOYEE DETAILS WORKING IN SALES FROM 2 TABLES
   ============================================*/

SELECT JOB_TITLE, AVG(SALARY)
FROM EMPLOYEE_DEMO INNER JOIN EMPLOYEE_SALARY
ON EMPLOYEE_DEMO.EMP_ID = EMPLOYEE_SALARY.EMP_ID
WHERE JOB_TITLE = 'SALES'
GROUP BY JOB_TITLE

/* ============================================
   UNION UNION ALL. CAREFUL USING UNION FOR LOGIC ERROR. AS LONG DATA TYPE + NO OF FIELD MATCH, IT WILL RUN 
   ============================================*/

SELECT EMP_ID,FIRSTNAME,AGE FROM EMPLOYEE_DEMO UNION ALL
SELECT EMP_ID,JOB_TITLE, SALARY FROM EMPLOYEE_SALARY ORDER BY EMP_ID

/* ============================================
   CASE STATEMENT - CONDITIONAL 
   CASE WHEN.... THEN ,ELSE...END AS FIELDNAME 
   AFTER SELECT STATEMENT (WITH JOIN)
   ============================================*/

SELECT EMPLOYEE_SALARY.EMP_ID, EMPLOYEE_DEMO.FIRSTNAME,EMPLOYEE_DEMO.LASTNAME,EMPLOYEE_SALARY.JOB_TITLE,SALARY,

CASE WHEN JOB_TITLE = 'SALES' THEN SALARY + (SALARY*0.05)
WHEN JOB_TITLE = 'HR' THEN SALARY + (SALARY*0.01)
WHEN JOB_TITLE = 'ACCOUNTS' THEN SALARY + (SALARY*0.10)
ELSE SALARY + (SALARY*0.03)
END AS INCREMENT

FROM EMPLOYEE_DEMO JOIN EMPLOYEE_SALARY
ON EMPLOYEE_DEMO.EMP_ID = EMPLOYEE_SALARY.EMP_ID

/* ============================================
   HAVING STATEMENT - AGGREGATE FUNCTION | USE AFTER GROUP BY 
   ============================================*/

SELECT JOB_TITLE, AVG(SALARY) AS AVERAGE
FROM EMPLOYEE_DEMO INNER JOIN EMPLOYEE_SALARY
ON EMPLOYEE_DEMO.EMP_ID = EMPLOYEE_SALARY.EMP_ID
GROUP BY JOB_TITLE
HAVING AVG(SALARY) >= 4000


/* ============================================
   PARTION BY - TO DISPLAY AGGREGATE FIELD TOGATHER WITH YOUR OTHER FIELD TOTAL GENDER
   USE IF YOU WANT GET THE GROUP TOTAL (SUM) OR GROUP COUNT OVER A GROUP TO DISPLAY 
   ============================================*/

SELECT FIRSTNAME,LASTNAME, GENDER,SALARY, count(GENDER) over (partition by gender) as TotalGender
FROM EMPLOYEE_DEMO dem INNER JOIN EMPLOYEE_SALARY sal 
ON dem.EMP_ID = sal.EMP_ID

FIRSTNAME	LASTNAME	GENDER  SALARY 	TOTALGENDER
PAM		BEAVER	        FEMALE	4000	3
ANGELA		MARTIN	        FEMALE	2200	3
MARY		PATTERSON       FEMALE  4200	3
STANLEY		HUDSON	        MALE    2000	7
KEVIN		MALONE	        MALE	3400	7
TOM		HUDSON	        MALE	4000	7
DWIGHT		SCHRUTE	        MALE	3400	7
TOBY		FLENDERSON	MALE	3800	7
MICHAEL		SCOTT	        MALE	3500	7
JIM		HARPRET	        MALE	2200	7

vs group by

SELECT FIRSTNAME,LASTNAME, GENDER,SALARY, count(GENDER) as TotalGender
FROM EMPLOYEE_DEMO dem INNER JOIN EMPLOYEE_SALARY sal 
ON dem.EMP_ID = sal.EMP_ID
group by FIRSTNAME,LASTNAME, GENDER,SALARY 

FIRSTNAME	LASTNAME	GENDER  SALARY 	TOTALGENDER

ANGELA		MARTIN		FEMALE	2200	1
DWIGHT		SCHRUTE	    	MALE	3400	1
JIM		HARPRET	    	MALE	2200	1
KEVIN		MALONE	    	MALE	3400	1
MARY		PATTERSON   	FEMALE	4200	1
MICHAEL		SCOTT	    	MALE	3500	1
PAM		BEAVER	    	FEMALE	4000	1
STANLEY		HUDSON	    	MALE	2000	1
TOBY		FLENDERSON  	MALE	3800	1
TOM		HUDSON	    	MALE	4000	1
